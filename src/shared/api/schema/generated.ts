/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["DeviseLoginRequest"];
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        /** @description Bearer token for authentication */
                        Authorization?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description Invalid credentials */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RegisterRequest"];
                };
            };
            responses: {
                /** @description Registration successful */
                201: {
                    headers: {
                        /** @description Bearer token for authentication */
                        Authorization?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description Validation errors */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Logout user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Logout successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/current_user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Current user data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get application configuration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Application configuration */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Config"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/sign_in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login user (legacy) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["DeviseLoginRequest"];
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        /** @description Bearer token for authentication */
                        Authorization?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/sign_out": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Logout user (legacy) */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Logout successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all users */
        get: operations["getAllUsers"];
        put?: never;
        /** Register new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RegisterRequest"];
                };
            };
            responses: {
                /** @description Registration successful */
                201: {
                    headers: {
                        /** @description Bearer token for authentication */
                        Authorization?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description Validation errors */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/promo_codes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all promo codes */
        get: operations["getAllPromoCodes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/offers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all offers */
        get: operations["getAllOffers"];
        put?: never;
        /** Create a new offer */
        post: operations["createOffer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/offers/{offerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get offer by ID */
        get: operations["getOffer"];
        /** Update an offer */
        put: operations["updateOffer"];
        post?: never;
        /** Delete an offer */
        delete: operations["deleteOffer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all conversions */
        get: operations["getAllConversions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/clicks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all clicks */
        get: operations["getAllClicks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all reports across all ads managers */
        get: operations["getAllReportsGlobal"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ads_managers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all ads managers */
        get: operations["getAllAdsManagers"];
        put?: never;
        /** Create a new ads manager */
        post: operations["createAdsManager"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ads_managers/{adsManagerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get ads manager by ID */
        get: operations["getAdsManager"];
        /** Update an ads manager */
        put: operations["updateAdsManager"];
        post?: never;
        /** Delete an ads manager */
        delete: operations["deleteAdsManager"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ads_managers/{adsManagerId}/offer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get offer for ads manager */
        get: operations["getAdsManagerOffer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ads_managers/{adsManagerId}/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all reports for ads manager */
        get: operations["getAllReports"];
        put?: never;
        /** Create a new report */
        post: operations["createReport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ads_managers/{adsManagerId}/reports/{reportId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get report by ID */
        get: operations["getReport"];
        /** Update a report */
        put: operations["updateReport"];
        post?: never;
        /** Delete a report */
        delete: operations["deleteReport"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            id: string;
            /** Format: email */
            email: string;
            first_name?: string;
            last_name?: string;
            name?: string;
            phone_number?: string;
            /** @enum {string} */
            role?: "buyer" | "manager" | "admin";
            avatar?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        LoginRequest: {
            /** Format: email */
            email: string;
            /** Format: password */
            password: string;
        };
        DeviseLoginRequest: {
            user: {
                /** Format: email */
                email: string;
                /** Format: password */
                password: string;
            };
        };
        RegisterRequest: {
            user: {
                /** Format: email */
                email: string;
                /** Format: password */
                password: string;
                /** Format: password */
                password_confirmation: string;
                first_name?: string;
                last_name?: string;
                phone_number?: string;
                country?: string;
            };
        };
        AuthResponse: {
            user: components["schemas"]["User"];
        };
        ErrorResponse: {
            error?: string;
        };
        Config: {
            app_name?: string;
            app_version?: string;
            features?: {
                notifications?: boolean;
                multi_language?: boolean;
                dark_mode?: boolean;
            };
            limits?: {
                max_campaigns?: number;
                max_offers?: number;
            };
            settings?: {
                [key: string]: unknown;
            };
        };
        UserRecord: {
            id?: number;
            /** Format: email */
            email?: string;
            first_name?: string | null;
            last_name?: string | null;
            phone_number?: string | null;
            country?: string | null;
            role?: string;
            account_status?: string;
            buyer_name?: string | null;
            offers_count?: number | null;
            /** Format: date-time */
            last_online?: string | null;
            /** Format: date-time */
            confirmed_at?: string | null;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        PromoCodeRecord: {
            id?: number;
            name?: string;
            description?: string | null;
            /** Format: date-time */
            expires_at?: string | null;
            /** Format: float */
            discount_percent?: number;
            is_active?: boolean;
            is_expired?: boolean;
            offer?: {
                id?: number;
                name?: string;
                aasm_status?: string;
            };
            buyer?: {
                id?: string;
                email?: string;
                name?: string;
            };
            country?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        OfferRecord: {
            id?: string;
            name?: string;
            aasm_status?: string;
            /** @enum {string} */
            offer_type?: "clo" | "no_clo";
            ads_manager_id?: string;
            ads_manager_title?: string | null;
            buyer_id?: string | null;
            buyer_name?: string | null;
            registrations_count?: number;
            first_deposits_count?: number;
            /** Format: float */
            first_deposits_sum?: number;
            /** Format: float */
            revenue?: number;
            clicks_count?: number;
            promo_codes_count?: number;
            /** Format: float */
            spend?: number;
            /** Format: float */
            roi?: number;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        OfferInput: {
            name: string;
            aasm_status: string;
            ads_manager_id: string;
            /** @enum {string} */
            offer_type: "clo" | "no_clo";
        };
        ClickRecord: {
            id?: number;
            subid?: string | null;
            ip?: string | null;
            user_agent?: string | null;
            country?: string | null;
            is_lead?: boolean;
            is_seal?: boolean;
            is_uniq?: boolean;
            offer_id?: number;
            offer_name?: string;
            /** @enum {string} */
            offer_type?: "clo" | "no_clo";
            buyer_name?: string | null;
            conversion_id?: number | null;
            ad_campaign_id?: string | null;
            creative_id?: string | null;
            os?: string | null;
            city?: string | null;
            source?: string | null;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        ConversionRecord: {
            id?: number;
            /** @enum {string} */
            aasm_state?: "register" | "sell" | "rebill" | "cancel";
            /** Format: float */
            cost?: number;
            /** @enum {string} */
            convertible_type?: "Click" | "PromoCode";
            convertible_id?: number;
            first_name?: string;
            last_name?: string;
            email?: string;
            phone?: string | null;
            full_name?: string;
            convertible_info?: Record<string, never>;
            buyer_id?: string | null;
            offer_name?: string | null;
            click_subid?: string | null;
            click_country?: string | null;
            click_city?: string | null;
            click_ad_campaign_id?: string | null;
            click_creative_id?: string | null;
            click_offer_type?: string | null;
            click_os?: string | null;
            click_source?: string | null;
            promo_code_name?: string | null;
            /** Format: float */
            promo_code_discount?: number | null;
            /** Format: date */
            promo_code_expires_at?: string | null;
            promo_code_offer_type?: string | null;
            offer_id?: string;
            /** Format: float */
            time_to_sell?: number | null;
            /** Format: float */
            time_to_rebill?: number | null;
            /** Format: float */
            revenue?: number | null;
            is_high_value?: boolean;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        AdsManagerRecord: {
            id?: string;
            title?: string;
            id_rc?: string | null;
            buyer_id?: string;
            buyer_name?: string;
            /** @description Name of the single assigned offer */
            offer_name?: string | null;
            /** @description ID of the single assigned offer */
            offer_id?: string | null;
            /** @description Whether ads manager has an assigned offer */
            has_offer?: boolean;
            reports_count?: number;
            /** Format: float */
            total_spend?: number;
            /** @description Number of registrations today */
            daily_registrations?: number;
            /** @description Number of deposits (first deposits) today */
            daily_deposits?: number;
            /**
             * Format: float
             * @description Sum of first deposits today
             */
            daily_fd_sum?: number;
            /**
             * Format: float
             * @description Total revenue (FD + rebills) today
             */
            daily_revenue?: number;
            /** @description Number of clicks today */
            daily_clicks?: number;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        AdsManagerInput: {
            title: string;
            id_rc?: string | null;
        };
        OfferSummary: {
            id?: string;
            name?: string;
            clicks_count?: number;
            conversions_count?: number;
        };
        ReportRecord: {
            id?: string;
            ads_manager_id?: string;
            /** @description Title of the ads manager */
            ads_manager_title?: string;
            offer_id?: string;
            offer_name?: string;
            /** Format: float */
            spend?: number;
            formatted_spend?: string;
            /**
             * Format: float
             * @description Revenue from conversions for the report date
             */
            revenue?: number;
            formatted_revenue?: string;
            /**
             * Format: float
             * @description Profit (revenue - spend) for the report date
             */
            profit?: number;
            formatted_profit?: string;
            /**
             * Format: float
             * @description ROI percentage for the report date
             */
            roi?: number;
            formatted_roi?: string;
            /**
             * Format: float
             * @description Conversion Rate percentage for the report date
             */
            cr?: number;
            formatted_cr?: string;
            /**
             * Format: float
             * @description Cost Per Mille for the report date
             */
            cpm?: number;
            formatted_cpm?: string;
            /**
             * Format: float
             * @description Click Through Rate percentage for the report date
             */
            ctr?: number;
            formatted_ctr?: string;
            /**
             * Format: float
             * @description Cost Per Click for the report date
             */
            cpc?: number;
            formatted_cpc?: string;
            /** Format: date */
            report_date?: string;
            formatted_date?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        ReportInput: {
            offer_id: string;
            /** Format: float */
            spend: number;
            /** Format: date */
            report_date: string;
        };
        ValidationErrorResponse: {
            errors?: string[];
        };
        Pagination: {
            current_page: number;
            next_page?: number | null;
            prev_page?: number | null;
            total_pages: number;
            total_count: number;
            page_size: number;
        };
        Error: {
            message: string;
            code: string;
        };
    };
    responses: {
        /** @description Unauthorized */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Bad request */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Validation error */
        ValidationError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ValidationErrorResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAllUsers: {
        parameters: {
            query?: {
                _order?: string;
                page?: number;
                limit?: number;
                role?: string;
                account_status?: string;
                country?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        users?: components["schemas"]["UserRecord"][];
                        total_count?: number;
                        pagination?: components["schemas"]["Pagination"];
                        stats?: {
                            total_count?: number;
                            by_role?: Record<string, never>;
                            by_status?: Record<string, never>;
                            by_country?: Record<string, never>;
                            confirmed_count?: number;
                            unconfirmed_count?: number;
                        };
                        sorting?: {
                            field?: string | null;
                            /** @enum {string} */
                            direction?: "asc" | "desc";
                            order_param?: string | null;
                        };
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    getAllPromoCodes: {
        parameters: {
            query?: {
                offer_id?: number;
                status?: "active" | "expired";
                high_discount?: boolean;
                _order?: string;
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of promo codes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        promo_codes?: components["schemas"]["PromoCodeRecord"][];
                        total_count?: number;
                        active_count?: number;
                        expired_count?: number;
                        pagination?: components["schemas"]["Pagination"];
                        stats?: {
                            total_count?: number;
                            active_count?: number;
                            expired_count?: number;
                            high_discount_count?: number;
                            /** Format: float */
                            average_discount?: number;
                        };
                        sorting?: {
                            field?: string | null;
                            /** @enum {string} */
                            direction?: "asc" | "desc";
                            order_param?: string | null;
                        };
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    getAllOffers: {
        parameters: {
            query?: {
                _order?: string;
                page?: number;
                limit?: number;
                status?: string;
                offer_type?: "clo" | "no_clo";
                buyer_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of offers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        offers?: components["schemas"]["OfferRecord"][];
                        pagination?: components["schemas"]["Pagination"];
                        stats?: {
                            total_count?: number;
                            active_count?: number;
                            inactive_count?: number;
                            /** Format: float */
                            total_revenue?: number;
                            total_clicks?: number;
                        };
                        sorting?: {
                            field?: string | null;
                            /** @enum {string} */
                            direction?: "asc" | "desc";
                            order_param?: string | null;
                        };
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    createOffer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    offer: components["schemas"]["OfferInput"];
                };
            };
        };
        responses: {
            /** @description Offer created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        offer?: components["schemas"]["OfferRecord"];
                        message?: string;
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            422: components["responses"]["ValidationError"];
        };
    };
    getOffer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                offerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Offer details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        offer?: components["schemas"]["OfferRecord"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    updateOffer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                offerId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    offer: components["schemas"]["OfferInput"];
                };
            };
        };
        responses: {
            /** @description Offer updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        offer?: components["schemas"]["OfferRecord"];
                        message?: string;
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            422: components["responses"]["ValidationError"];
        };
    };
    deleteOffer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                offerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Offer deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    getAllConversions: {
        parameters: {
            query?: {
                aasm_state?: "register" | "sell" | "rebill" | "cancel";
                convertible_type?: "Click" | "PromoCode";
                convertible_id?: number;
                min_cost?: number;
                max_cost?: number;
                high_value?: boolean;
                email?: string;
                name?: string;
                date_from?: string;
                date_to?: string;
                _order?: string;
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of conversions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        conversions?: components["schemas"]["ConversionRecord"][];
                        pagination?: components["schemas"]["Pagination"];
                        stats?: {
                            total_count?: number;
                            /** Format: float */
                            total_cost?: number;
                            /** Format: float */
                            total_revenue?: number;
                            by_state?: Record<string, never>;
                            by_type?: Record<string, never>;
                            high_value_count?: number;
                        };
                        sorting?: {
                            field?: string | null;
                            /** @enum {string} */
                            direction?: "asc" | "desc";
                            order_param?: string | null;
                        };
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    getAllClicks: {
        parameters: {
            query?: {
                offer_id?: number;
                country?: string;
                offer_type?: "clo" | "no_clo";
                os?: string;
                city?: string;
                source?: string;
                ad_campaign_id?: string;
                creative_id?: string;
                leads?: boolean;
                seals?: boolean;
                unique?: boolean;
                limit?: number;
                offset?: number;
                _order?: string;
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of clicks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        clicks?: components["schemas"]["ClickRecord"][];
                        total_count?: number;
                        filtered_count?: number;
                        pagination?: components["schemas"]["Pagination"];
                        stats?: {
                            total_count?: number;
                            leads_count?: number;
                            seals_count?: number;
                            unique_count?: number;
                            by_country?: Record<string, never>;
                            by_offer?: Record<string, never>;
                        };
                        sorting?: {
                            field?: string | null;
                            /** @enum {string} */
                            direction?: "asc" | "desc";
                            order_param?: string | null;
                        };
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    getAllReportsGlobal: {
        parameters: {
            query?: {
                _order?: string;
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of all reports */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        reports?: components["schemas"]["ReportRecord"][];
                        pagination?: components["schemas"]["Pagination"];
                        stats?: {
                            /** Format: float */
                            total_spend?: number;
                            /** Format: float */
                            total_revenue?: number;
                            /** Format: float */
                            total_profit?: number;
                            /** Format: float */
                            average_roi?: number;
                        };
                        sorting?: {
                            field?: string | null;
                            /** @enum {string} */
                            direction?: "asc" | "desc";
                            order_param?: string | null;
                        };
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    getAllAdsManagers: {
        parameters: {
            query?: {
                _order?: string;
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of ads managers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ads_managers?: components["schemas"]["AdsManagerRecord"][];
                        pagination?: components["schemas"]["Pagination"];
                        stats?: {
                            total_count?: number;
                            with_offers?: number;
                            without_offers?: number;
                            /** Format: float */
                            total_spend?: number;
                            /** Format: float */
                            total_revenue?: number;
                        };
                        sorting?: {
                            field?: string | null;
                            /** @enum {string} */
                            direction?: "asc" | "desc";
                            order_param?: string | null;
                        };
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    createAdsManager: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    ads_manager: components["schemas"]["AdsManagerInput"];
                };
            };
        };
        responses: {
            /** @description Ads Manager created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ads_manager?: components["schemas"]["AdsManagerRecord"];
                        message?: string;
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            422: components["responses"]["ValidationError"];
        };
    };
    getAdsManager: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                adsManagerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ads Manager details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ads_manager?: components["schemas"]["AdsManagerRecord"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    updateAdsManager: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                adsManagerId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    ads_manager: components["schemas"]["AdsManagerInput"];
                };
            };
        };
        responses: {
            /** @description Ads Manager updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ads_manager?: components["schemas"]["AdsManagerRecord"];
                        message?: string;
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            422: components["responses"]["ValidationError"];
        };
    };
    deleteAdsManager: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                adsManagerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ads Manager deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    getAdsManagerOffer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                adsManagerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Offer summary for ads manager */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        offer?: components["schemas"]["OfferSummary"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    getAllReports: {
        parameters: {
            query?: {
                _order?: string;
                page?: number;
                limit?: number;
            };
            header?: never;
            path: {
                adsManagerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of reports */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        reports?: components["schemas"]["ReportRecord"][];
                        pagination?: components["schemas"]["Pagination"];
                        stats?: {
                            /** Format: float */
                            total_spend?: number;
                            /** Format: float */
                            total_revenue?: number;
                            /** Format: float */
                            total_profit?: number;
                            /** Format: float */
                            average_roi?: number;
                        };
                        sorting?: {
                            field?: string | null;
                            /** @enum {string} */
                            direction?: "asc" | "desc";
                            order_param?: string | null;
                        };
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    createReport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                adsManagerId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    report: components["schemas"]["ReportInput"];
                };
            };
        };
        responses: {
            /** @description Report created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        report?: components["schemas"]["ReportRecord"];
                        message?: string;
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            422: components["responses"]["ValidationError"];
        };
    };
    getReport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                adsManagerId: string;
                reportId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Report details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        report?: components["schemas"]["ReportRecord"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    updateReport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                adsManagerId: string;
                reportId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    report: components["schemas"]["ReportInput"];
                };
            };
        };
        responses: {
            /** @description Report updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        report?: components["schemas"]["ReportRecord"];
                        message?: string;
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            422: components["responses"]["ValidationError"];
        };
    };
    deleteReport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                adsManagerId: string;
                reportId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Report deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
}
