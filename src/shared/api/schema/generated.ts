/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/users/sign_in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["DeviseLoginRequest"];
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        /** @description Bearer token for authentication */
                        Authorization?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/sign_out": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Logout user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Logout successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all users */
        get: operations["getAllUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/clicks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all clicks */
        get: operations["getAllClicks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/promo_codes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all promo codes */
        get: operations["getAllPromoCodes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/offers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all offers */
        get: operations["getAllOffers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all conversions */
        get: operations["getAllConversions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        DeviseLoginRequest: {
            user: {
                /** Format: email */
                email: string;
                /** Format: password */
                password: string;
            };
        };
        User: {
            id: string;
            /** Format: email */
            email: string;
            first_name?: string;
            last_name?: string;
            phone_number?: string;
            /** @enum {string} */
            role?: "user" | "manager" | "admin";
        };
        Error: {
            message: string;
            code: string;
        };
        UserRecord: {
            id?: number;
            /** Format: email */
            email?: string;
            first_name?: string | null;
            last_name?: string | null;
            phone_number?: string | null;
            country?: string | null;
            role?: string;
            account_status?: string;
            buyer_name?: string | null;
            offers_count?: number | null;
            /** Format: date-time */
            last_online?: string | null;
            /** Format: date-time */
            confirmed_at?: string | null;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        ClickRecord: {
            id?: number;
            subid?: string | null;
            ip?: string | null;
            user_agent?: string | null;
            country?: string | null;
            is_lead?: boolean;
            is_seal?: boolean;
            offer_type?: string | null;
            is_uniq?: boolean;
            offer_id?: number;
            offer_name?: string;
            buyer_name?: string | null;
            conversion_id?: number | null;
            sub_id1?: string | null;
            sub_id2?: string | null;
            sub_id3?: string | null;
            sub_id4?: string | null;
            sub_id5?: string | null;
            sub_id6?: string | null;
            sub_id7?: string | null;
            sub_id8?: string | null;
            sub_id9?: string | null;
            sub_id10?: string | null;
            sub_id11?: string | null;
            sub_id12?: string | null;
            sub_id13?: string | null;
            sub_id14?: string | null;
            sub_id15?: string | null;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        PromoCodeRecord: {
            id?: number;
            name?: string;
            description?: string | null;
            /** Format: date-time */
            expires_at?: string | null;
            /** Format: float */
            discount_percent?: number;
            is_active?: boolean;
            is_expired?: boolean;
            offer?: {
                id?: number;
                name?: string;
                aasm_status?: string;
            };
            conversions_count?: number;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        OfferRecord: {
            id?: number;
            name?: string;
            aasm_status?: string;
            buyers_count?: number;
            clicks_count?: number;
            promo_codes_count?: number;
            active_promo_codes_count?: number;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        ConversionRecord: {
            id?: number;
            aasm_state?: string;
            /** Format: float */
            cost?: number;
            convertible_type?: string;
            convertible_id?: number;
            convertible_info?: Record<string, never>;
            sub_ids?: Record<string, never>;
            is_high_value?: boolean;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
    };
    responses: {
        /** @description Unauthorized */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAllUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        users?: components["schemas"]["UserRecord"][];
                        total_count?: number;
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    getAllClicks: {
        parameters: {
            query?: {
                offer_id?: number;
                country?: string;
                leads?: boolean;
                seals?: boolean;
                unique?: boolean;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of clicks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        clicks?: components["schemas"]["ClickRecord"][];
                        total_count?: number;
                        filtered_count?: number;
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    getAllPromoCodes: {
        parameters: {
            query?: {
                offer_id?: number;
                status?: "active" | "expired";
                high_discount?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of promo codes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        promo_codes?: components["schemas"]["PromoCodeRecord"][];
                        total_count?: number;
                        active_count?: number;
                        expired_count?: number;
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    getAllOffers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of offers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        offers?: components["schemas"]["OfferRecord"][];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    getAllConversions: {
        parameters: {
            query?: {
                aasm_state?: "pending" | "approved" | "rejected" | "confirmed" | "paid" | "cancelled";
                convertible_type?: "Click" | "PromoCode";
                convertible_id?: number;
                min_cost?: number;
                max_cost?: number;
                high_value?: boolean;
                date_from?: string;
                date_to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of conversions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        conversions?: components["schemas"]["ConversionRecord"][];
                        pagination?: {
                            current_page?: number;
                            next_page?: number | null;
                            prev_page?: number | null;
                            total_pages?: number;
                            total_count?: number;
                        };
                        stats?: Record<string, never>;
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
}
