# Cloud Build configuration for rameda-ui static deployment
# Builds React app with Bun and deploys to GCS + CDN

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  substitutionOption: ALLOW_LOOSE
  
substitutions:
  _PROJECT_ID: 'rameda-465221'
  _BUCKET_NAME: 'rameda-ui-static'
  _CDN_URL_MAP: 'rameda-ui-cdn'
  _REGION: 'europe-west3'

steps:
  # Step 1: Install Bun
  - name: 'gcr.io/cloud-builders/curl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Install Bun
        curl -fsSL https://bun.sh/install | bash
        export PATH="$HOME/.bun/bin:$PATH"
        
        # Verify Bun installation
        bun --version
        
        # Make Bun available for subsequent steps
        cp $HOME/.bun/bin/bun /workspace/bun
        chmod +x /workspace/bun
    id: 'install-bun'

  # Step 2: Install dependencies
  - name: 'gcr.io/cloud-builders/curl'
    entrypoint: '/workspace/bun'
    args: ['install']
    id: 'install-deps'
    waitFor: ['install-bun']

  # Step 3: Run linting
  - name: 'gcr.io/cloud-builders/curl'
    entrypoint: '/workspace/bun'
    args: ['run', 'lint']
    id: 'lint-code'
    waitFor: ['install-deps']

  # Step 4: Build production version
  - name: 'gcr.io/cloud-builders/curl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        export NODE_ENV=production
        export VITE_API_URL=https://api.rameda.pro/api/v1
        export VITE_APP_VERSION=${SHORT_SHA}
        
        /workspace/bun run build
        
        # Verify build output
        ls -la dist/
        echo "Build completed successfully"
    id: 'build-app'
    waitFor: ['lint-code']

  # Step 5: Upload to GCS with proper cache headers
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:alpine'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Set cache headers for different file types
        
        # Upload HTML files with no-cache
        gsutil -m rsync -r -d \
          -x ".*\.(js|css|png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot|ico|json)$$" \
          dist/ gs://${_BUCKET_NAME}/
        
        # Set cache-control for HTML files (no cache)
        gsutil -m setmeta -h "Cache-Control:no-cache,no-store,must-revalidate" \
          -h "Content-Type:text/html;charset=utf-8" \
          gs://${_BUCKET_NAME}/*.html
        
        # Upload static assets with long cache
        gsutil -m rsync -r -d \
          -x ".*\.html$$" \
          dist/ gs://${_BUCKET_NAME}/
        
        # Set cache-control for static assets (1 year)
        gsutil -m setmeta -h "Cache-Control:public,max-age=31536000,immutable" \
          gs://${_BUCKET_NAME}/**/*.js
        
        gsutil -m setmeta -h "Cache-Control:public,max-age=31536000,immutable" \
          gs://${_BUCKET_NAME}/**/*.css
        
        gsutil -m setmeta -h "Cache-Control:public,max-age=31536000,immutable" \
          gs://${_BUCKET_NAME}/**/*.{png,jpg,jpeg,gif,svg,woff,woff2,ttf,eot,ico}
        
        # Set cache-control for JSON files (5 minutes)
        gsutil -m setmeta -h "Cache-Control:public,max-age=300" \
          gs://${_BUCKET_NAME}/**/*.json
        
        echo "Files uploaded to gs://${_BUCKET_NAME}/"
    id: 'upload-to-gcs'
    waitFor: ['build-app']

  # Step 6: Invalidate CDN cache
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:alpine'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Invalidate CDN cache for updated files
        gcloud compute url-maps invalidate-cdn-cache ${_CDN_URL_MAP} \
          --path "/*" \
          --async
        
        echo "CDN cache invalidated for ${_CDN_URL_MAP}"
    id: 'invalidate-cdn'
    waitFor: ['upload-to-gcs']

  # Step 7: Verify deployment
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:alpine'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Check if files are accessible
        echo "Deployment verification:"
        gsutil ls -l gs://${_BUCKET_NAME}/index.html || echo "Warning: index.html not found"
        gsutil ls gs://${_BUCKET_NAME}/assets/ || echo "Warning: assets folder not found"
        
        echo "Deployment completed successfully!"
        echo "Site should be available at: https://rameda.pro"
        echo "CDN cache invalidation initiated"
    id: 'verify-deployment'
    waitFor: ['invalidate-cdn']

# Build timeout (increased for dependency installation)
timeout: '1200s'

# Service account with necessary permissions
serviceAccount: 'projects/${_PROJECT_ID}/serviceAccounts/cloudbuild-rameda-ui@${_PROJECT_ID}.iam.gserviceaccount.com' 