name: Rameda UI - Static Deployment to GCS

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      skip_lint:
        description: 'Skip linting (use with caution)'
        required: false
        default: false
        type: boolean

# Grant TOKEN write permissions for version commits
permissions:
  contents: write

env:
  PROJECT_ID: rameda-465221
  REGION: europe-west3
  BUCKET_NAME: rameda-ui-static
  CDN_URL_MAP: rameda-ui-cdn

jobs:
  # Job 1: Bump Version
  bump-version:
    name: 🔢 Bump Version
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    outputs:
      new_version: ${{ steps.bump-version.outputs.new_version }}
      version_changed: ${{ steps.bump-version.outputs.version_changed }}
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GIT_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: 🔢 Bump version
        id: bump-version
        run: |
          # Read current version or create if doesn't exist
          if [[ -f VERSION ]]; then
            CURRENT_VERSION=$(cat VERSION | tr -d '\n\r')
            echo "Current version: $CURRENT_VERSION"
          else
            echo "VERSION file not found, creating with initial version 1.0.0"
            CURRENT_VERSION="1.0.0"
            echo "$CURRENT_VERSION" > VERSION
          fi

          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Increment version based on input
          case "${{ github.event.inputs.version_type }}" in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_VERSION="$NEW_MAJOR.0.0"
              ;;
            "minor")
              NEW_MINOR=$((MINOR + 1))
              NEW_VERSION="$MAJOR.$NEW_MINOR.0"
              ;;
            "patch"|*)
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
              ;;
          esac

          echo "New version: $NEW_VERSION"
          echo "$NEW_VERSION" > VERSION
          
          # Set outputs
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_changed=true" >> $GITHUB_OUTPUT

      - name: 📝 Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          git add VERSION
          git commit -m "🔖 Bump ${{ github.event.inputs.version_type }} version to v${{ steps.bump-version.outputs.new_version }}"

      - name: 📤 Push changes
        run: |
          git push origin HEAD

  # Job 2: Local Lint (Optional)
  lint:
    name: 🧪 Run Linting
    runs-on: ubuntu-latest
    needs: bump-version
    if: ${{ !github.event.inputs.skip_lint }}
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: 🟦 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: 📚 Install dependencies
        run: bun install

      - name: 🧪 Run linting
        run: bun run lint

  # Job 3: Trigger Cloud Build
  cloud-build:
    name: ☁️ Deploy via Cloud Build
    runs-on: ubuntu-latest
    needs: [bump-version, lint]
    if: always() && (needs.lint.result == 'success' || github.event.inputs.skip_lint == 'true')
    outputs:
      build_id: ${{ steps.cloud-build.outputs.build_id }}
      build_url: ${{ steps.cloud-build.outputs.build_url }}
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: ☁️ Submit to Cloud Build
        id: cloud-build
        run: |
          # Submit build to Cloud Build
          BUILD_OUTPUT=$(gcloud builds submit \
            --config cloudbuild.yaml \
            --substitutions=_PROJECT_ID=${{ env.PROJECT_ID }},_BUCKET_NAME=${{ env.BUCKET_NAME }},_CDN_URL_MAP=${{ env.CDN_URL_MAP }},_REGION=${{ env.REGION }},_VERSION=${{ needs.bump-version.outputs.new_version }} \
            --format="value(id,logUrl)" \
            --verbosity=info)
          
          # Extract build ID and URL
          BUILD_ID=$(echo "$BUILD_OUTPUT" | cut -f1)
          BUILD_URL=$(echo "$BUILD_OUTPUT" | cut -f2)
          
          echo "Cloud Build ID: $BUILD_ID"
          echo "Cloud Build URL: $BUILD_URL"
          
          # Set outputs
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "build_url=$BUILD_URL" >> $GITHUB_OUTPUT

      - name: ⏱️ Wait for Cloud Build completion
        run: |
          # Wait for build to complete
          gcloud builds wait ${{ steps.cloud-build.outputs.build_id }}
          
          # Get final status
          BUILD_STATUS=$(gcloud builds describe ${{ steps.cloud-build.outputs.build_id }} --format="value(status)")
          echo "Final build status: $BUILD_STATUS"
          
          if [[ "$BUILD_STATUS" != "SUCCESS" ]]; then
            echo "Cloud Build failed with status: $BUILD_STATUS"
            exit 1
          fi

  # Job 4: Notifications and Summary
  notify:
    name: 📢 Notify & Summary
    runs-on: ubuntu-latest
    needs: [bump-version, lint, cloud-build]
    if: always()
    steps:
      - name: 📊 Prepare summary
        run: |
          echo "## 🚀 Rameda UI Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Version Bump | ${{ needs.bump-version.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Linting | ${{ github.event.inputs.skip_lint == 'true' && '⏭️ Skipped' || (needs.lint.result == 'success' && '✅' || '❌') }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Cloud Build | ${{ needs.cloud-build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**New Version:** v${{ needs.bump-version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**GCS Bucket:** \`gs://${{ env.BUCKET_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Website URL:** https://rameda.pro" >> $GITHUB_STEP_SUMMARY
          echo "**Cloud Build:** [${{ needs.cloud-build.outputs.build_id }}](${{ needs.cloud-build.outputs.build_url }})" >> $GITHUB_STEP_SUMMARY

      - name: 🔔 Send success notification
        if: ${{ needs.cloud-build.result == 'success' }}
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            🚀 *Rameda UI Successfully Deployed!*
            
            📦 *Version:* v${{ needs.bump-version.outputs.new_version }}
            🌐 *Website:* https://rameda.pro
            ☁️ *CDN:* Cache invalidated
            🧪 *Linting:* ${{ github.event.inputs.skip_lint == 'true' && 'Skipped' || 'Passed' }}
            📁 *Bucket:* gs://${{ env.BUCKET_NAME }}
            
            [View Cloud Build](${{ needs.cloud-build.outputs.build_url }})
            [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          format: markdown

      - name: 🚨 Send failure notification
        if: ${{ needs.cloud-build.result == 'failure' || needs.lint.result == 'failure' }}
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ❌ *Rameda UI Deployment Failed!*
            
            📦 *Version:* v${{ needs.bump-version.outputs.new_version }}
            🚫 *Failed Step:* ${{ needs.lint.result == 'failure' && 'Linting' || 'Cloud Build' }}
            
            [View Cloud Build](${{ needs.cloud-build.outputs.build_url || 'N/A' }})
            [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          format: markdown 