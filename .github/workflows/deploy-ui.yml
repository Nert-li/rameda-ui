name: Rameda UI - Complete CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      skip_tests:
        description: 'Skip tests (use with caution)'
        required: false
        default: false
        type: boolean

# Grant TOKEN write permissions for version commits
permissions:
  contents: write

env:
  PROJECT_ID: rameda-465221
  LOCATION: europe-west3
  BUCKET: rameda-ui-static
  IMAGE_NAME: europe-west3-docker.pkg.dev/rameda-465221/gcr/rameda-ui

jobs:
  # Job 1: Bump Version
  bump-version:
    name: 🔢 Bump Version
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    outputs:
      new_version: ${{ steps.bump-version.outputs.new_version }}
      version_changed: ${{ steps.bump-version.outputs.version_changed }}
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GIT_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: 🔢 Bump version
        id: bump-version
        run: |
          # Read current version or create if doesn't exist
          if [[ -f VERSION ]]; then
            CURRENT_VERSION=$(cat VERSION | tr -d '\n\r')
            echo "Current version: $CURRENT_VERSION"
          else
            echo "VERSION file not found, creating with initial version 0.1.0"
            CURRENT_VERSION="0.1.0"
            echo "$CURRENT_VERSION" > VERSION
          fi

          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Increment version based on input
          case "${{ github.event.inputs.version_type }}" in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_VERSION="$NEW_MAJOR.0.0"
              ;;
            "minor")
              NEW_MINOR=$((MINOR + 1))
              NEW_VERSION="$MAJOR.$NEW_MINOR.0"
              ;;
            "patch"|*)
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
              ;;
          esac

          echo "New version: $NEW_VERSION"
          echo "$NEW_VERSION" > VERSION
          
          # Set outputs
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_changed=true" >> $GITHUB_OUTPUT

      - name: 📝 Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          git add VERSION
          git commit -m "🔖 Bump ${{ github.event.inputs.version_type }} version to v${{ steps.bump-version.outputs.new_version }}"

      - name: 📤 Push changes
        run: |
          git push origin HEAD

  # Job 2: Run Tests & Linting (always runs, but can skip actual tests)
  test:
    name: 🧪 Run Tests & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: bump-version
    outputs:
      tests_skipped: ${{ steps.test-result.outputs.tests_skipped }}
    steps:
      - name: 📦 Checkout repository (latest)
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: 🟨 Setup Bun
        if: ${{ github.event.inputs.skip_tests != 'true' }}
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: 📚 Install dependencies
        if: ${{ github.event.inputs.skip_tests != 'true' }}
        run: |
          bun install --frozen-lockfile

      - name: 🔍 Type checking
        if: ${{ github.event.inputs.skip_tests != 'true' }}
        run: |
          bun run tsc --noEmit

      - name: 🧹 Lint check
        if: ${{ github.event.inputs.skip_tests != 'true' }}
        run: |
          bun run lint

      - name: 🧪 Run tests
        if: ${{ github.event.inputs.skip_tests != 'true' }}
        run: |
          # Only run if test script exists in package.json
          if bun run --silent test --help >/dev/null 2>&1; then
            echo "Running tests..."
            bun run test
          else
            echo "No test script found, skipping tests"
          fi

      - name: 🏗️ Build check
        if: ${{ github.event.inputs.skip_tests != 'true' }}
        run: |
          # Test build to ensure it works
          VITE_BASE_URL="https://storage.googleapis.com/rameda-ui-static/static/test/" bun run build
          
          # Check if build artifacts exist
          if [ ! -f "dist/index.html" ]; then
            echo "❌ Build failed: index.html not found!"
            exit 1
          fi
          
          echo "✅ Build successful!"

      - name: 📊 Upload build artifacts
        if: ${{ github.event.inputs.skip_tests != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: build-check-artifacts
          path: |
            dist/
          retention-days: 1

      - name: ⏭️ Skip tests notification
        if: ${{ github.event.inputs.skip_tests == 'true' }}
        run: |
          echo "⚠️ Tests were skipped by user request"

      - name: 📝 Set test result
        id: test-result
        run: |
          SKIP_TESTS="${{ github.event.inputs.skip_tests }}"
          if [[ "$SKIP_TESTS" == "true" ]]; then
            echo "tests_skipped=true" >> $GITHUB_OUTPUT
          else
            echo "tests_skipped=false" >> $GITHUB_OUTPUT
          fi

  # Job 3: Build and Push Docker Image
  build-and-push:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [bump-version, test]
    if: needs.test.result == 'success'
    outputs:
      image_tag: ${{ env.IMAGE_NAME }}:v${{ needs.bump-version.outputs.new_version }}
    steps:
      - name: 📦 Checkout repository (latest)
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: 🟨 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ⚙️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: 🐳 Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.LOCATION }}-docker.pkg.dev --quiet

      - name: 📚 Install dependencies
        run: |
          bun install --frozen-lockfile

      - name: 🏗️ Build UI project
        run: |
          VERSION="${{ needs.bump-version.outputs.new_version }}"
          PUBLIC_URL="https://storage.googleapis.com/${{ env.BUCKET }}/static/v${VERSION}"
          echo "🔧 Building UI with VITE_BASE_URL=${PUBLIC_URL}/"
          VITE_BASE_URL="${PUBLIC_URL}/" bun run build

      - name: ☁️ Upload static assets to GCS
        timeout-minutes: 10
        run: |
          VERSION="${{ needs.bump-version.outputs.new_version }}"
          STATIC_PATH="static/v${VERSION}"
          
          echo "🚀 Uploading to GCS: $STATIC_PATH"
          echo "📊 Bucket: ${{ env.BUCKET }}"
          echo "📂 Full path: gs://${{ env.BUCKET }}/${STATIC_PATH}/"
          
          # Check if build directory exists
          if [ ! -d "dist" ]; then
            echo "❌ dist directory not found!"
            exit 1
          fi
          
          # Upload assets if they exist
          if [ -d "dist/assets" ]; then
            echo "📦 Uploading assets..."
            gsutil -m cp -r "dist/assets" "gs://${{ env.BUCKET }}/${STATIC_PATH}/"
          fi
          
          # Upload JS files
          if ls dist/*.js 1> /dev/null 2>&1; then
            echo "📦 Uploading JS files..."
            gsutil -m cp dist/*.js "gs://${{ env.BUCKET }}/${STATIC_PATH}/"
          fi
          
          # Upload CSS files
          if ls dist/*.css 1> /dev/null 2>&1; then
            echo "📦 Uploading CSS files..."
            gsutil -m cp dist/*.css "gs://${{ env.BUCKET }}/${STATIC_PATH}/"
          fi
          
          # Set caching headers
          echo "⚙️ Setting cache headers..."
          gsutil -m setmeta -h "Cache-Control:public,max-age=31536000,immutable" "gs://${{ env.BUCKET }}/${STATIC_PATH}/**" 2>/dev/null || echo "⚠️ Warning: could not set cache headers"

      - name: 🐳 Build and push Docker image
        timeout-minutes: 15
        run: |
          VERSION="${{ needs.bump-version.outputs.new_version }}"
          IMAGE_TAG="${{ env.IMAGE_NAME }}:v${VERSION}"
          IMAGE_LATEST="${{ env.IMAGE_NAME }}:latest"
          
          echo "🐳 Docker build starting..."
          echo "📦 Version: v${VERSION}"
          echo "🏷️ Image tag: ${IMAGE_TAG}"
          echo "🏷️ Latest tag: ${IMAGE_LATEST}"
          
          # Create temporary directory for Docker build
          TMPDIR=$(mktemp -d)
          echo "📁 Temp dir: $TMPDIR"
          mkdir -p "$TMPDIR/app"
          
          # Check that index.html exists
          if [ ! -f "dist/index.html" ]; then
            echo "❌ dist/index.html not found!"
            rm -rf "$TMPDIR"
            exit 1
          fi
          
          # Copy index.html to temp directory
          cp "dist/index.html" "$TMPDIR/app/"
          
          # Create Dockerfile
          cat > "$TMPDIR/Dockerfile" <<EOF
          FROM nginx:1.25-alpine
          COPY app/index.html /usr/share/nginx/html/index.html
          RUN rm -rf /etc/nginx/conf.d/* && \\
              echo 'server { listen 8080; root /usr/share/nginx/html; index index.html; location / { try_files \$uri /index.html; } }' > /etc/nginx/conf.d/default.conf
          EXPOSE 8080
          EOF
          
          echo "🐳 Building Docker image: $IMAGE_TAG"
          docker build -t "$IMAGE_TAG" "$TMPDIR"
          
          echo "🚀 Pushing Docker image to Artifact Registry..."
          docker push "$IMAGE_TAG"
          
          echo "🏷️ Creating latest tag..."
          docker tag "$IMAGE_TAG" "$IMAGE_LATEST"
          docker push "$IMAGE_LATEST"
          
          # Cleanup
          rm -rf "$TMPDIR"
          
          echo "✅ Docker image built and pushed successfully!"

      - name: 📝 Output build info
        run: |
          VERSION="${{ needs.bump-version.outputs.new_version }}"
          echo "## 🚀 Build Completed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "**Docker Image:** \`${{ env.IMAGE_NAME }}:v${VERSION}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Static Assets:** https://storage.googleapis.com/${{ env.BUCKET }}/static/v${VERSION}/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- Manually deploy to Kubernetes: \`kubectl rollout restart deployment rameda-ui -n rameda-ui\`" >> $GITHUB_STEP_SUMMARY
          echo "- App will be available at: https://crm.rameda.pro" >> $GITHUB_STEP_SUMMARY

  # Job 4: Notifications and Summary
  notify:
    name: 📢 Notify & Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [bump-version, test, build-and-push]
    if: always()
    steps:
      - name: 📊 Prepare summary
        run: |
          echo "## 🚀 Rameda UI Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Version Bump | ${{ needs.bump-version.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests & Linting | ${{ needs.test.outputs.tests_skipped == 'true' && '⏭️ Skipped' || (needs.test.result == 'success' && '✅' || '❌') }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Push | ${{ needs.build-and-push.result == 'success' && '✅' || (needs.build-and-push.result == 'failure' && '❌' || '⏭️ Skipped') }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ needs.bump-version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.IMAGE_NAME }}:v${{ needs.bump-version.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Static URL:** https://storage.googleapis.com/${{ env.BUCKET }}/static/v${{ needs.bump-version.outputs.new_version }}/" >> $GITHUB_STEP_SUMMARY
          echo "**App URL:** https://crm.rameda.pro" >> $GITHUB_STEP_SUMMARY

      - name: 🔔 Send success notification
        if: ${{ needs.build-and-push.result == 'success' }}
        continue-on-error: true
        run: |
          echo "📱 Sending Telegram notification..."
          echo "📊 Build completed successfully"
          echo "🚀 Ready for manual deployment"
          
      - name: 📱 Telegram notification
        if: ${{ needs.build-and-push.result == 'success' }}
        continue-on-error: true
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            🚀 *Rameda UI Build Completed!*
            
            📦 *Version:* v${{ needs.bump-version.outputs.new_version }}
            
            [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          format: markdown

      - name: 🚨 Send failure notification
        if: ${{ needs.build-and-push.result == 'failure' || needs.test.result == 'failure' }}
        continue-on-error: true
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ❌ *Rameda UI Build Failed!*
            
            📦 *Version:* v${{ needs.bump-version.outputs.new_version }}
            🚫 *Failed Step:* ${{ needs.test.result == 'failure' && 'Tests' || 'Build & Push' }}
            
            [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          format: markdown 